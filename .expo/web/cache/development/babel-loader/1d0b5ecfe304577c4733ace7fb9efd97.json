{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Camera } from 'expo-camera';\nimport colors from \"../assets/colors/colors\";\nexport default function CameraScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasCameraPermission = _useState2[0],\n      setCameraPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  useEffect(function _callee() {\n    var _await$Camera$request, status;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n          case 2:\n            _await$Camera$request = _context.sent;\n            status = _await$Camera$request.status;\n            setCameraPermission(status === 'granted');\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Camera, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      width: '100%',\n      backgroundColor: 'transparent',\n      flexDirection: 'row'\n    }\n  }, React.createElement(View, {\n    style: {\n      position: 'absolute',\n      left: '5%',\n      top: '10%',\n      flexDirection: 'column',\n      justifyContent: 'space-between'\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      backgroundColor: '#fff',\n      borderRadius: 50,\n      height: 25,\n      width: 25\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 16\n    }\n  }, \"\\u26A1\\uFE0F\"))), React.createElement(View, {\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      flexDirection: 'row',\n      flex: 1,\n      width: '100%',\n      padding: 20,\n      justifyContent: 'space-between'\n    }\n  }, React.createElement(View, {\n    style: {\n      alignSelf: 'center',\n      flex: 1,\n      alignItems: 'center'\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      width: 70,\n      height: 70,\n      bottom: 0,\n      borderRadius: 50,\n      borderWidth: 5,\n      backgroundColor: '#fff'\n    }\n  }))))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Platform.OS === 'android' ? 25 : 0\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  }\n});","map":{"version":3,"sources":["/home/mirsahib/Desktop/BanGIAA/component/CameraScreen.js"],"names":["React","useState","useEffect","Camera","colors","CameraScreen","hasCameraPermission","setCameraPermission","Constants","Type","back","type","setType","requestCameraPermissionsAsync","status","styles","container","flex","width","backgroundColor","flexDirection","position","left","top","justifyContent","borderRadius","height","fontSize","bottom","padding","alignSelf","alignItems","borderWidth","StyleSheet","create","paddingTop","Platform","OS","camera","buttonContainer","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, Platform, View, TouchableOpacity } from 'react-native';\nimport { Camera } from 'expo-camera';\nimport colors from '../assets/colors/colors';\n\n\nexport default function CameraScreen() {\n    const [hasCameraPermission, setCameraPermission] = useState(null)\n    const [type, setType] = useState(Camera.Constants.Type.back);\n\n\n    useEffect(async () => {\n        const { status } = await Camera.requestCameraPermissionsAsync()\n        setCameraPermission(status === 'granted')\n    }, [])\n\n    return (\n        <View style={styles.container}>\n            <Camera\n                style={{ flex: 1 }}\n            >\n                <View\n                    style={{\n                        flex: 1,\n                        width: '100%',\n                        backgroundColor: 'transparent',\n                        flexDirection: 'row'\n                    }}\n                >\n                    <View\n                        style={{\n                            position: 'absolute',\n                            left: '5%',\n                            top: '10%',\n                            flexDirection: 'column',\n                            justifyContent: 'space-between'\n                        }}\n                    >\n                        <TouchableOpacity\n                            style={{\n                                backgroundColor: '#fff',\n                                borderRadius: 50,\n                                height: 25,\n                                width: 25\n                            }}\n                        >\n                            <Text\n                                style={{\n                                    fontSize: 16\n                                }}\n                            >\n                                ⚡️\n                            </Text>\n                        </TouchableOpacity>\n                    </View>\n                    <View\n                        style={{\n                            position: 'absolute',\n                            bottom: 0,\n                            flexDirection: 'row',\n                            flex: 1,\n                            width: '100%',\n                            padding: 20,\n                            justifyContent: 'space-between'\n                        }}\n                    >\n                        <View\n                            style={{\n                                alignSelf: 'center',\n                                flex: 1,\n                                alignItems: 'center'\n                            }}\n                        >\n                            <TouchableOpacity\n                                style={{\n                                    width: 70,\n                                    height: 70,\n                                    bottom: 0,\n                                    borderRadius: 50,\n                                    borderWidth:5,\n                                    backgroundColor: '#fff'\n                                }}\n                            />\n                        </View>\n                    </View>\n                </View>\n            </Camera>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: Platform.OS === 'android' ? 25 : 0\n    },\n    camera: {\n        flex: 1,\n    },\n    buttonContainer: {\n        flex: 1,\n        backgroundColor: 'transparent',\n        flexDirection: 'row',\n        margin: 20,\n    },\n});"]},"metadata":{},"sourceType":"module"}